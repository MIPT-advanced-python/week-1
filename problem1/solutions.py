import numpy as np


def task1():
    # Создайте вектор с элементами от 12 до 512
    pass


def task2():
    # Создайте вектор из нулей длины 1000, но его 55-ый елемент должен быть равен 1
    pass


def task3():
    # Создайте матрицу (20, 20), заполненую от 0 до 399
    pass


def task4(arr):
    """
    Найдите все положительные числа в массиве

    :param arr: входной массив
    :return: массив из положительных чисел
    :Example:
    >>> task4(np.array([1, 2, 0, 0, 4, 0]))
    [1, 2, 4]
    """
    pass


def task5():
    """
    Умножьте матрицу размерности (5, 3) на (3, 2)

    :return: (matrix1, matrix2, result) - матрица (5, 3), матрица (3, 2), их произведение
    """
    pass


def task6():
    """
    Создайте матрицу (10, 10) так, чтобы на границе были 0, а внтури 1

    :return: matrix
    """
    pass


def task7():
    """
    Создайте рандомный вектор и отсортируйте его

    :return: matrix
    """
    pass


# 8. Каков эквивалент функции enumerate для numpy массивов?


def task9():
    """
    Создайте рандомный вектор и выполните нормализацию столбцов
    (из каждого столбца вычесть среднее этого столбца и поделить на дисперсию этого столбца).
    Использовать ТОЛЬКО numpy

    :return: (data, normalized_data)
    """
    pass


def task10(num, vector):
    """
    Для заданного числа найдите ближайший к нему элемент в векторе

    :param num: число, которое искать
    :param vector: вектор, где искать
    :return: одно число - ближайшее в векторе
    """
    pass


def task11(n, vector):
    """
    Найдите n наибольших значений в векторе

    :param n: сколько значений
    :param vector: вектор, где искать
    :return: np.ndarray из найденных векторов
    """
    pass
